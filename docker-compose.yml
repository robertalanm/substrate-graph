version: '3.4'

# 0 postgres
# 1 polkadot / substrate node
# 2 archiver
# 3 hasura
# 4 adminer ( optional )

services:

  #
  #   P O L K A D O T
  #

  # archive:
  #   image: 2075/archiver-polkadot:latest
  #   container_name: archiver
  #   restart: unless-stopped
  #   command: ["-vv", "--config", "config/polkadot.toml"]
  #   volumes:
  #     - ./config:/config
  #     - ./data/substrate/chains/dev/db:/archive/data
  #   links:
  #     - postgres
  #     - polkadot
  #   depends_on:
  #     - postgres
  #     - polkadot
  #   networks:
  #     - backend

  # polkadot:
  #   image: parity/polkadot:latest
  #   container_name: polkadot
  #   restart: unless-stopped
  #   ports:
  #     - 30333:30333
  #     - 9933:9933
  #     - 9944:9944
  #   command: ["--chain", "polkadot", "--name", "PolkadotArchiver", "--pruning", "archive"]
  #   volumes:
  #     - ./data/polkadot:/data
  #   networks:
  #     - backend

  #
  #   S U B S T R A T E
  #

  archive:
    image: 2075/archiver-substrate:latest
    container_name: archiver
    restart: unless-stopped
    command: ["-vv", "--config", "${ARCHIVER_CONFIG}", "--spec", "${CHAINSPEC}"]
    volumes:
      - ./config:/config
      - ./root/archive/data:/archive/data
    links:
      - postgres
      - substrate
    depends_on:
      - postgres
      - substrate
    networks:
      - backend

  substrate:
    image: parity/substrate:latest
    container_name: substrate
    restart: unless-stopped
    ports:
      - 30333:30333
      - 9933:9933
      - 9944:9944
    command: ["--chain", "${CHAINSPEC}", "--base-path", "/data", "--name", "${NODE_NAME}", "--pruning", "archive", "--alice", "--validator", "--unsafe-rpc-external", "--unsafe-ws-external", "--rpc-cors", "all"]
    volumes:
      - ./config:/config
      - ./data/substrate:/data
    networks:
      - backend

  postgres:
    image: postgres
    container_name: postgres
    ports:
      - '${DB_PORT}:5432'
    command: ["postgres", "-cshared_preload_libraries=pg_stat_statements"]
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./data/pg:/var/lib/postgresql/data
    networks:
      - backend

  graphql:
    image: hasura/graphql-engine:v1.3.0
    container_name: graphql
    ports:
      - '${GQL_PORT}:8080'
    depends_on:
      - 'postgres'
    restart: always
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${DB_USER}:${DB_PASS}@postgres:5432/${DB_NAME}
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      # admin secret â€” remove when not in dev environment
      HASURA_GRAPHQL_ENABLE_CONSOLE: "${GQL_CONSOLE}"
      HASURA_GRAPHQL_ADMIN_SECRET: ${GQL_SECRET}
    networks:
      - frontend
      - backend

  #   db admin

  # adminer:
  #   image: adminer
  #   container_name: adminer
  #   restart: always
  #   ports:
  #     - ${DB_ADMIN_PORT}:8080
  #   links:
  #     - postgres:postgres

  #   monitoring

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   volumes:
  #     - ./data/grafana/data:/var/lib/grafana
  #     - ./data/grafana/provisioning:/etc/grafana/provisioning
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASS}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   restart: unless-stopped
  #   ports:
  #     - ${GF_PORT}:3000
  #   networks:
  #     - backend
  #     - frontend
  #   labels:
  #     org.label-schema.group: "monitoring"

networks:
    backend:
    frontend: